/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __CONFIG_MANAGER_H__
#define __CONFIG_MANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.regolith.ConfigManager */

#define TYPE_ORG_REGOLITH_CONFIG_MANAGER (org_regolith_config_manager_get_type ())
#define ORG_REGOLITH_CONFIG_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_REGOLITH_CONFIG_MANAGER, OrgRegolithConfigManager))
#define IS_ORG_REGOLITH_CONFIG_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_REGOLITH_CONFIG_MANAGER))
#define ORG_REGOLITH_CONFIG_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_REGOLITH_CONFIG_MANAGER, OrgRegolithConfigManagerIface))

struct _OrgRegolithConfigManager;
typedef struct _OrgRegolithConfigManager OrgRegolithConfigManager;
typedef struct _OrgRegolithConfigManagerIface OrgRegolithConfigManagerIface;

struct _OrgRegolithConfigManagerIface
{
  GTypeInterface parent_iface;
};

GType org_regolith_config_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_regolith_config_manager_interface_info (void);
guint org_regolith_config_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* ---- */

#define TYPE_ORG_REGOLITH_CONFIG_MANAGER_PROXY (org_regolith_config_manager_proxy_get_type ())
#define ORG_REGOLITH_CONFIG_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_REGOLITH_CONFIG_MANAGER_PROXY, OrgRegolithConfigManagerProxy))
#define ORG_REGOLITH_CONFIG_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_REGOLITH_CONFIG_MANAGER_PROXY, OrgRegolithConfigManagerProxyClass))
#define ORG_REGOLITH_CONFIG_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_REGOLITH_CONFIG_MANAGER_PROXY, OrgRegolithConfigManagerProxyClass))
#define IS_ORG_REGOLITH_CONFIG_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_REGOLITH_CONFIG_MANAGER_PROXY))
#define IS_ORG_REGOLITH_CONFIG_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_REGOLITH_CONFIG_MANAGER_PROXY))

typedef struct _OrgRegolithConfigManagerProxy OrgRegolithConfigManagerProxy;
typedef struct _OrgRegolithConfigManagerProxyClass OrgRegolithConfigManagerProxyClass;
typedef struct _OrgRegolithConfigManagerProxyPrivate OrgRegolithConfigManagerProxyPrivate;

struct _OrgRegolithConfigManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgRegolithConfigManagerProxyPrivate *priv;
};

struct _OrgRegolithConfigManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_regolith_config_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgRegolithConfigManagerProxy, g_object_unref)
#endif

void org_regolith_config_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgRegolithConfigManager *org_regolith_config_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgRegolithConfigManager *org_regolith_config_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_regolith_config_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgRegolithConfigManager *org_regolith_config_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgRegolithConfigManager *org_regolith_config_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_REGOLITH_CONFIG_MANAGER_SKELETON (org_regolith_config_manager_skeleton_get_type ())
#define ORG_REGOLITH_CONFIG_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_REGOLITH_CONFIG_MANAGER_SKELETON, OrgRegolithConfigManagerSkeleton))
#define ORG_REGOLITH_CONFIG_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_REGOLITH_CONFIG_MANAGER_SKELETON, OrgRegolithConfigManagerSkeletonClass))
#define ORG_REGOLITH_CONFIG_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_REGOLITH_CONFIG_MANAGER_SKELETON, OrgRegolithConfigManagerSkeletonClass))
#define IS_ORG_REGOLITH_CONFIG_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_REGOLITH_CONFIG_MANAGER_SKELETON))
#define IS_ORG_REGOLITH_CONFIG_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_REGOLITH_CONFIG_MANAGER_SKELETON))

typedef struct _OrgRegolithConfigManagerSkeleton OrgRegolithConfigManagerSkeleton;
typedef struct _OrgRegolithConfigManagerSkeletonClass OrgRegolithConfigManagerSkeletonClass;
typedef struct _OrgRegolithConfigManagerSkeletonPrivate OrgRegolithConfigManagerSkeletonPrivate;

struct _OrgRegolithConfigManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgRegolithConfigManagerSkeletonPrivate *priv;
};

struct _OrgRegolithConfigManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_regolith_config_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgRegolithConfigManagerSkeleton, g_object_unref)
#endif

OrgRegolithConfigManager *org_regolith_config_manager_skeleton_new (void);


G_END_DECLS

#endif /* __CONFIG_MANAGER_H__ */
